const API_BASE = 'http://127.0.0.1:8000';
const API_KEY = 'troque_aqui';

// Theme management
function toggleTheme() {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
}

// Load theme from localStorage
function loadTheme() {
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);
}

// Button loading state
function setButtonLoading(buttonId, loading) {
    const btn = document.getElementById(buttonId);
    if (loading) {
        btn.disabled = true;
        btn.innerHTML = '<span class="loading"></span> Processando...';
    } else {
        btn.disabled = false;
        btn.textContent = btn.dataset.originalText || 'Executar';
    }
}

async function uploadCSV() {
    const fileInput = document.getElementById('csvFile');
    const file = fileInput.files[0];
    
    if (!file) {
        showMessage('uploadStatus', '‚ö†Ô∏è Por favor, selecione um arquivo CSV primeiro!', 'error');
        return;
    }
    
    const btn = document.getElementById('uploadBtn');
    btn.dataset.originalText = 'üì§ Carregar Arquivo';
    setButtonLoading('uploadBtn', true);
    
    const formData = new FormData();
    formData.append('file', file);
    
    try {
        const response = await fetch(`${API_BASE}/upload-csv`, {
            method: 'POST',
            headers: {'x-api-key': API_KEY},
            body: formData
        });
        
        if (!response.ok) {
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        document.getElementById('uploadStatus').innerHTML = `
            <div class="success">
                <h3>‚úÖ Arquivo carregado com sucesso!</h3>
                <p style="margin-top: 0.5rem;">üéâ Seus dados foram processados e est√£o prontos para usar!</p>
                <div class="stats-grid" style="margin-top: 1rem;">
                    <div class="stat-card">
                        <div class="stat-value">${data.n_students}</div>
                        <div class="stat-label">üë• Estudantes</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${data.n_items}</div>
                        <div class="stat-label">üìù Exerc√≠cios</div>
                    </div>
                </div>
                <p style="margin-top: 1rem; font-size: 0.9em;">
                    üí° Agora voc√™ pode pedir recomenda√ß√µes na se√ß√£o 2 abaixo!
                </p>
            </div>
        `;
    } catch (error) {
        showMessage('uploadStatus', `‚ùå Erro ao processar arquivo: ${error.message}<br><br>üí° Dica: Verifique se o arquivo est√° no formato correto (veja o exemplo acima)`, 'error');
    } finally {
        setButtonLoading('uploadBtn', false);
    }
}

async function getRecommendation() {
    const strategy = document.getElementById('strategy').value;
    const targetP = parseFloat(document.getElementById('targetP').value);
    
    const btn = document.getElementById('recommendBtn');
    btn.dataset.originalText = 'üéØ Obter Recomenda√ß√£o';
    setButtonLoading('recommendBtn', true);
    
    const payload = {
        student_history: [
            {item_id: 'item_1', correct: 1, timestamp: new Date().toISOString()},
            {item_id: 'item_2', correct: 0, timestamp: new Date().toISOString()}
        ],
        candidate_items: ['item_3', 'item_4', 'item_5'],
        strategy: strategy,
        target_p: targetP
    };
    
    try {
        const response = await fetch(`${API_BASE}/infer`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': API_KEY
            },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error(`Erro ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        const strategyNames = {
            'target': 'üéØ Target (Dificuldade Ideal)',
            'info_gain': 'üìä Ganho de Informa√ß√£o',
            'exploration': 'üîç Explora√ß√£o',
            'heuristic': 'üßÆ Heur√≠stica',
            'random': 'üé≤ Aleat√≥ria'
        };
        
        document.getElementById('recommendation').innerHTML = `
            <div class="success">
                <h3>üéØ Recomenda√ß√£o Gerada pela IA</h3>
                <p style="margin-top: 0.5rem; font-size: 0.95em;">
                    A Intelig√™ncia Artificial analisou o hist√≥rico e recomenda:
                </p>
                <div class="stats-grid" style="margin-top: 1rem;">
                    <div class="stat-card">
                        <div class="stat-value">${data.item_id}</div>
                        <div class="stat-label">üìù Exerc√≠cio Recomendado</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${(data.p_estimated * 100).toFixed(1)}%</div>
                        <div class="stat-label">üìä Chance de Acerto</div>
                    </div>
                </div>
                <div style="margin-top: 1.5rem; padding: 1rem; background: var(--section-bg); border-radius: 8px;">
                    <p><strong>üí° Por que este exerc√≠cio?</strong></p>
                    <p style="margin-top: 0.5rem;">${data.rationale}</p>
                </div>
                <p style="margin-top: 1rem;">
                    <span class="badge badge-info">${strategyNames[data.strategy] || data.strategy}</span>
                </p>
                <p style="margin-top: 1rem; font-size: 0.85em; color: var(--text-secondary);">
                    ‚ÑπÔ∏è Esta recomenda√ß√£o foi calculada usando Intelig√™ncia Artificial (Deep Learning)
                </p>
            </div>
        `;
    } catch (error) {
        showMessage('recommendation', `‚ùå Erro ao obter recomenda√ß√£o: ${error.message}<br><br>üí° Dica: Certifique-se de que enviou os dados primeiro (se√ß√£o 1) e que a API est√° rodando.`, 'error');
    } finally {
        setButtonLoading('recommendBtn', false);
    }
}

async function loadMetrics() {
    try {
        const response = await fetch(`${API_BASE}/metrics`, {
            headers: {'x-api-key': API_KEY}
        });
        
        if (!response.ok) return;
        
        const data = await response.json();
        
        document.getElementById('metrics').innerHTML = `
            <div class="info">
                <h3>üìä M√©tricas do Modelo</h3>
            </div>
        `;
        
        const statsHtml = `
            <div class="stat-card">
                <div class="stat-value">${data.auc_dkt.toFixed(3)}</div>
                <div class="stat-label">AUC</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${data.accuracy_dkt.toFixed(3)}</div>
                <div class="stat-label">Accuracy</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${data.avg_gain_dkt.toFixed(3)}</div>
                <div class="stat-label">Ganho M√©dio DKT</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${data.time_to_master_mean_dkt.toFixed(1)}</div>
                <div class="stat-label">Tempo at√© Maestria</div>
            </div>
        `;
        
        document.getElementById('statsGrid').innerHTML = statsHtml;
        
        // Create chart
        const ctx = document.getElementById('metricsChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['DKT', 'Random', 'Heuristic'],
                datasets: [{
                    label: 'Ganho M√©dio de Habilidade',
                    data: [data.avg_gain_dkt, data.avg_gain_random, data.avg_gain_heuristic],
                    backgroundColor: [
                        'rgba(59, 130, 246, 0.8)',
                        'rgba(239, 68, 68, 0.8)',
                        'rgba(16, 185, 129, 0.8)'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Compara√ß√£o de Estrat√©gias'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error('Erro ao carregar m√©tricas:', error);
    }
}

async function checkDrift() {
    showMessage('advancedResults', 'üîç Verificando se o modelo precisa ser retreinado...<br><br>üí° Esta an√°lise compara dados atuais com os dados de treino.', 'info');
    
    try {
        const response = await fetch(`${API_BASE}/check-drift`, {
            headers: {'x-api-key': API_KEY}
        });
        
        if (!response.ok) {
            throw new Error('Endpoint n√£o dispon√≠vel');
        }
        
        const data = await response.json();
        
        const driftStatus = data.has_drift ? 
            '<span class="badge badge-error">‚ö†Ô∏è Drift Detectado - Modelo Pode Estar Desatualizado</span>' :
            '<span class="badge badge-success">‚úÖ Modelo Est√° Funcionando Bem</span>';
        
        const recommendation = data.has_drift ?
            '<p style="margin-top: 1rem; padding: 1rem; background: rgba(239, 68, 68, 0.1); border-radius: 8px;"><strong>‚ö†Ô∏è Recomenda√ß√£o:</strong><br>O modelo est√° desatualizado. Retreine com dados mais recentes para manter a precis√£o!</p>' :
            '<p style="margin-top: 1rem; padding: 1rem; background: rgba(16, 185, 129, 0.1); border-radius: 8px;"><strong>‚úÖ Tudo Certo:</strong><br>O modelo est√° funcionando bem. N√£o √© necess√°rio retreinar agora.</p>';
        
        showMessage('advancedResults', `
            <h3>üîç An√°lise de Drift do Modelo</h3>
            ${driftStatus}
            <p style="margin-top: 1rem; font-size: 0.9em; color: var(--text-secondary);">
                üìÖ √öltima verifica√ß√£o: ${new Date().toLocaleString('pt-BR')}
            </p>
            ${recommendation}
            <details style="margin-top: 1rem;">
                <summary style="cursor: pointer; color: var(--primary-color);">‚ùì O que √© "drift"?</summary>
                <p style="margin-top: 0.5rem; font-size: 0.9em;">
                    Drift acontece quando os padr√µes dos dados mudam com o tempo. Por exemplo, se os alunos mudarem de n√≠vel, o modelo precisa aprender de novo com os dados atualizados.
                </p>
            </details>
        `, 'info');
    } catch (error) {
        showMessage('advancedResults', '‚ö†Ô∏è Recurso de detec√ß√£o de drift ainda n√£o est√° conectado √† API.<br><br>üí° Esta feature est√° implementada no c√≥digo mas precisa ser integrada ao servidor.', 'error');
    }
}

async function getCacheStats() {
    showMessage('advancedResults', 'üìä Carregando estat√≠sticas do cache...<br><br>üí° O cache √© uma mem√≥ria r√°pida que acelera as respostas.', 'info');
    
    try {
        const response = await fetch(`${API_BASE}/cache-stats`, {
            headers: {'x-api-key': API_KEY}
        });
        
        if (!response.ok) {
            throw new Error('Endpoint n√£o dispon√≠vel');
        }
        
        const data = await response.json();
        
        const utilizationPercent = ((data.utilization || 0) * 100).toFixed(1);
        const utilizationColor = data.utilization > 0.8 ? 'error' : data.utilization > 0.5 ? 'info' : 'success';
        
        showMessage('advancedResults', `
            <h3>üíæ Estat√≠sticas do Cache</h3>
            <p style="margin-top: 0.5rem; font-size: 0.95em;">
                O cache armazena resultados para responder mais r√°pido nas pr√≥ximas vezes!
            </p>
            <div class="stats-grid" style="margin-top: 1rem;">
                <div class="stat-card">
                    <div class="stat-value">${data.n_entries || 0}</div>
                    <div class="stat-label">üì¶ Itens Armazenados</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${(data.total_size_mb || 0).toFixed(2)} MB</div>
                    <div class="stat-label">üíæ Espa√ßo Usado</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${utilizationPercent}%</div>
                    <div class="stat-label">üìä Utiliza√ß√£o</div>
                </div>
            </div>
            <p style="margin-top: 1rem; padding: 1rem; background: var(--section-bg); border-radius: 8px; font-size: 0.9em;">
                <strong>‚ö° Benef√≠cio:</strong> Predi√ß√µes no cache s√£o at√© 90% mais r√°pidas!
            </p>
            <details style="margin-top: 1rem;">
                <summary style="cursor: pointer; color: var(--primary-color);">‚ùì Como funciona o cache?</summary>
                <p style="margin-top: 0.5rem; font-size: 0.9em;">
                    Quando voc√™ pede uma recomenda√ß√£o, o sistema guarda o resultado. Se pedir a mesma coisa de novo, ele j√° tem a resposta pronta e n√£o precisa calcular tudo outra vez!
                </p>
            </details>
        `, 'success');
    } catch (error) {
        showMessage('advancedResults', '‚ö†Ô∏è Recurso de cache ainda n√£o est√° conectado √† API.<br><br>üí° Esta feature est√° implementada no c√≥digo mas precisa ser integrada ao servidor.', 'error');
    }
}

async function getUncertainty() {
    showMessage('advancedResults', 'üé≤ Calculando n√≠vel de confian√ßa da IA usando MC Dropout...<br><br>üí° Vamos executar a IA 10 vezes para medir a certeza.', 'info');
    
    try {
        const response = await fetch(`${API_BASE}/uncertainty`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': API_KEY
            },
            body: JSON.stringify({
                student_history: [{item_id: 'item_1', correct: 1}],
                candidate_item: 'item_3',
                n_samples: 10
            })
        });
        
        if (!response.ok) {
            throw new Error('Endpoint n√£o dispon√≠vel');
        }
        
        const data = await response.json();
        const stdPercent = (data.std * 100).toFixed(1);
        const confidence = data.std < 0.05 ? 'Alta' : data.std < 0.10 ? 'M√©dia' : 'Baixa';
        const confidenceBadge = data.std < 0.05 ? 'success' : data.std < 0.10 ? 'info' : 'error';
        const confidenceEmoji = data.std < 0.05 ? '‚úÖ' : data.std < 0.10 ? '‚ö†Ô∏è' : '‚ùå';
        
        showMessage('advancedResults', `
            <h3>üé≤ An√°lise de Incerteza (MC Dropout)</h3>
            <p style="margin-top: 0.5rem; font-size: 0.95em;">
                Medimos quantas vezes a IA d√° a mesma resposta para avaliar sua confian√ßa
            </p>
            <div class="stats-grid" style="margin-top: 1rem;">
                <div class="stat-card">
                    <div class="stat-value">${(data.mean * 100).toFixed(1)}%</div>
                    <div class="stat-label">üìä Probabilidade M√©dia</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">¬±${stdPercent}%</div>
                    <div class="stat-label">üìâ Varia√ß√£o (Incerteza)</div>
                </div>
            </div>
            <p style="margin-top: 1rem;">
                <span class="badge badge-${confidenceBadge}">${confidenceEmoji} Confian√ßa: ${confidence}</span>
            </p>
            <p style="margin-top: 1rem; padding: 1rem; background: var(--section-bg); border-radius: 8px; font-size: 0.9em;">
                <strong>üí° Interpreta√ß√£o:</strong><br>
                ${confidence === 'Alta' ? 'A IA est√° muito confiante nesta predi√ß√£o. Voc√™ pode confiar nela!' : 
                  confidence === 'M√©dia' ? 'A IA tem confian√ßa razo√°vel, mas h√° alguma incerteza. Use com cuidado.' :
                  'A IA n√£o est√° confiante nesta predi√ß√£o. Considere usar estrat√©gia heur√≠stica ou coletar mais dados.'}
            </p>
            <details style="margin-top: 1rem;">
                <summary style="cursor: pointer; color: var(--primary-color);">‚ùì O que significa incerteza?</summary>
                <p style="margin-top: 0.5rem; font-size: 0.9em;">
                    Incerteza mostra se a IA "tem certeza" ou est√° "em d√∫vida". Baixa incerteza = alta confian√ßa. Alta incerteza = pode ser que a IA precise de mais dados sobre este aluno.
                </p>
            </details>
        `, 'success');
    } catch (error) {
        showMessage('advancedResults', '‚ö†Ô∏è Recurso de MC Dropout ainda n√£o est√° conectado √† API.<br><br>üí° Esta feature est√° implementada no c√≥digo mas precisa ser integrada ao servidor.', 'error');
    }
}

function showMessage(elementId, message, type) {
    document.getElementById(elementId).innerHTML = `
        <div class="${type}">
            ${message}
        </div>
    `;
}

// Initialize
window.onload = () => {
    loadTheme();
    loadMetrics();
};
